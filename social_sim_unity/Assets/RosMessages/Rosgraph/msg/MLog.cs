//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Rosgraph
{
    public class MLog : Message
    {
        public const string RosMessageName = "rosgraph_msgs/Log";

        // #
        // # Severity level constants
        // #
        public const sbyte DEBUG = 1; // debug level
        public const sbyte INFO = 2; // general level
        public const sbyte WARN = 4; // warning level
        public const sbyte ERROR = 8; // error level
        public const sbyte FATAL = 16; // fatal/critical level
        // #
        // # Fields
        // #
        public MHeader header;
        public sbyte level;
        public string name;
        //  name of the node
        public string msg;
        //  message 
        public string file;
        //  file the message came from
        public string function;
        //  function the message came from
        public uint line;
        //  line the message came from
        public string[] topics;
        //  topic names that the node publishes

        public MLog()
        {
            this.header = new MHeader();
            this.level = 0;
            this.name = "";
            this.msg = "";
            this.file = "";
            this.function = "";
            this.line = 0;
            this.topics = new string[0];
        }

        public MLog(MHeader header, sbyte level, string name, string msg, string file, string function, uint line, string[] topics)
        {
            this.header = header;
            this.level = level;
            this.name = name;
            this.msg = msg;
            this.file = file;
            this.function = function;
            this.line = line;
            this.topics = topics;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[] { (byte)this.level });
            listOfSerializations.Add(SerializeString(this.name));
            listOfSerializations.Add(SerializeString(this.msg));
            listOfSerializations.Add(SerializeString(this.file));
            listOfSerializations.Add(SerializeString(this.function));
            listOfSerializations.Add(BitConverter.GetBytes(this.line));

            listOfSerializations.Add(BitConverter.GetBytes(topics.Length));
            foreach (var entry in topics)
                listOfSerializations.Add(SerializeString(entry));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.level = (sbyte)data[offset]; ;
            offset += 1;
            var nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.name = DeserializeString(data, offset, nameStringBytesLength);
            offset += nameStringBytesLength;
            var msgStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.msg = DeserializeString(data, offset, msgStringBytesLength);
            offset += msgStringBytesLength;
            var fileStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.file = DeserializeString(data, offset, fileStringBytesLength);
            offset += fileStringBytesLength;
            var functionStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.function = DeserializeString(data, offset, functionStringBytesLength);
            offset += functionStringBytesLength;
            this.line = BitConverter.ToUInt32(data, offset);
            offset += 4;

            var topicsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.topics = new string[topicsArrayLength];
            for (var i = 0; i < topicsArrayLength; i++)
            {
                var topicsStringBytesLength = DeserializeLength(data, offset);
                offset += 4;
                this.topics[i] = DeserializeString(data, offset, topicsStringBytesLength);
                offset += topicsStringBytesLength;
            }

            return offset;
        }

        public override string ToString()
        {
            return "MLog: " +
            "\nheader: " + header.ToString() +
            "\nlevel: " + level.ToString() +
            "\nname: " + name.ToString() +
            "\nmsg: " + msg.ToString() +
            "\nfile: " + file.ToString() +
            "\nfunction: " + function.ToString() +
            "\nline: " + line.ToString() +
            "\ntopics: " + System.String.Join(", ", topics.ToList());
        }
    }
}
