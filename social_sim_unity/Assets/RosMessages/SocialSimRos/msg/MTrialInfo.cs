//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.SocialSimRos
{
    public class MTrialInfo : Message
    {
        public const string RosMessageName = "social_sim_ros/TrialInfo";

        //  Message containing the information of running a single A-B navigation trial
        public MHeader header;
        //  Information about the current interaction
        public MTime trial_start;
        //  When did we start tracking metrics for this trial
        public double timeout_time;
        //  How long is allowed for the episode have to complete?
        public string trial_name;
        //  Which trial name are we running
        public ushort trial_number;
        //  Which trial number are we running
        public uint num_actors;
        //  How many people in the scene?
        //  Robot start / goal locations
        public Geometry.MPose robot_start;
        public Geometry.MPose robot_goal;
        //  Robot location / distance relative to start / goal
        public double dist_to_target;
        //  Current distance to target
        public double min_dist_to_target;
        //  Closest difference to the target the robot has come
        public Geometry.MPose[] robot_poses;
        //  Poses of the robot over the episode
        public MTime[] robot_poses_ts;
        //  Timestamps of the robot poses over the episode
        //  Robot location relative to pedestrians
        public double min_dist_to_ped;
        //  Minimum distance to any pedestrian throughout the trial
        //  Collisions between robots and people
        public uint robot_on_person_intimate_dist_violations;
        //  Robot passes w/in the intimate distance of a pedestrian
        public uint person_on_robot_intimate_dist_violations;
        //  A person passes w/in the intimate distance of the robot
        public uint robot_on_person_personal_dist_violations;
        //  Robot passes w/in the personal distance of a pedestrian
        public uint person_on_robot_personal_dist_violations;
        //  A person passes w/in the personal distance of the robot
        public uint robot_on_person_collisions;
        //  Number of times that the robot collided with a person
        public uint person_on_robot_collisions;
        //  Number of times that ap person collided with the robot
        //  Collisions w/ static objects
        public uint obj_collisions;
        //  Number of times that the robot collided with a static object
        //  Computed post-hoc
        // bool                     completed                                      # was the robots finals distance to the goal within the desired distance?
        // float64                  targ_dist_norm                                 # dist_to_target normalized by path length
        // float64                  path_length                                    # Approximate distance traveled by robot
        // float64                  mean_dist_to_target_not_moving                 # How far away from the target was the robot while not moving
        // float64                  time_not_moving                                # Seconds the robot was not moving. Computed by checking if the robot moved more than 0.05m since a check the last 1s ago. If not, accumulate the time since the last check.
        // bool                     episode_timed_out
        // float64                  path_irregularity
        // float64                  path_efficiency

        public MTrialInfo()
        {
            this.header = new MHeader();
            this.trial_start = new MTime();
            this.timeout_time = 0.0;
            this.trial_name = "";
            this.trial_number = 0;
            this.num_actors = 0;
            this.robot_start = new Geometry.MPose();
            this.robot_goal = new Geometry.MPose();
            this.dist_to_target = 0.0;
            this.min_dist_to_target = 0.0;
            this.robot_poses = new Geometry.MPose[0];
            this.robot_poses_ts = new MTime[0];
            this.min_dist_to_ped = 0.0;
            this.robot_on_person_intimate_dist_violations = 0;
            this.person_on_robot_intimate_dist_violations = 0;
            this.robot_on_person_personal_dist_violations = 0;
            this.person_on_robot_personal_dist_violations = 0;
            this.robot_on_person_collisions = 0;
            this.person_on_robot_collisions = 0;
            this.obj_collisions = 0;
        }

        public MTrialInfo(MHeader header, MTime trial_start, double timeout_time, string trial_name, ushort trial_number, uint num_actors, Geometry.MPose robot_start, Geometry.MPose robot_goal, double dist_to_target, double min_dist_to_target, Geometry.MPose[] robot_poses, MTime[] robot_poses_ts, double min_dist_to_ped, uint robot_on_person_intimate_dist_violations, uint person_on_robot_intimate_dist_violations, uint robot_on_person_personal_dist_violations, uint person_on_robot_personal_dist_violations, uint robot_on_person_collisions, uint person_on_robot_collisions, uint obj_collisions)
        {
            this.header = header;
            this.trial_start = trial_start;
            this.timeout_time = timeout_time;
            this.trial_name = trial_name;
            this.trial_number = trial_number;
            this.num_actors = num_actors;
            this.robot_start = robot_start;
            this.robot_goal = robot_goal;
            this.dist_to_target = dist_to_target;
            this.min_dist_to_target = min_dist_to_target;
            this.robot_poses = robot_poses;
            this.robot_poses_ts = robot_poses_ts;
            this.min_dist_to_ped = min_dist_to_ped;
            this.robot_on_person_intimate_dist_violations = robot_on_person_intimate_dist_violations;
            this.person_on_robot_intimate_dist_violations = person_on_robot_intimate_dist_violations;
            this.robot_on_person_personal_dist_violations = robot_on_person_personal_dist_violations;
            this.person_on_robot_personal_dist_violations = person_on_robot_personal_dist_violations;
            this.robot_on_person_collisions = robot_on_person_collisions;
            this.person_on_robot_collisions = person_on_robot_collisions;
            this.obj_collisions = obj_collisions;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(trial_start.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.timeout_time));
            listOfSerializations.Add(SerializeString(this.trial_name));
            listOfSerializations.Add(BitConverter.GetBytes(this.trial_number));
            listOfSerializations.Add(BitConverter.GetBytes(this.num_actors));
            listOfSerializations.AddRange(robot_start.SerializationStatements());
            listOfSerializations.AddRange(robot_goal.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.dist_to_target));
            listOfSerializations.Add(BitConverter.GetBytes(this.min_dist_to_target));

            listOfSerializations.Add(BitConverter.GetBytes(robot_poses.Length));
            foreach (var entry in robot_poses)
                listOfSerializations.Add(entry.Serialize());

            listOfSerializations.Add(BitConverter.GetBytes(robot_poses_ts.Length));
            foreach (var entry in robot_poses_ts)
                listOfSerializations.Add(entry.Serialize());
            listOfSerializations.Add(BitConverter.GetBytes(this.min_dist_to_ped));
            listOfSerializations.Add(BitConverter.GetBytes(this.robot_on_person_intimate_dist_violations));
            listOfSerializations.Add(BitConverter.GetBytes(this.person_on_robot_intimate_dist_violations));
            listOfSerializations.Add(BitConverter.GetBytes(this.robot_on_person_personal_dist_violations));
            listOfSerializations.Add(BitConverter.GetBytes(this.person_on_robot_personal_dist_violations));
            listOfSerializations.Add(BitConverter.GetBytes(this.robot_on_person_collisions));
            listOfSerializations.Add(BitConverter.GetBytes(this.person_on_robot_collisions));
            listOfSerializations.Add(BitConverter.GetBytes(this.obj_collisions));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.trial_start.Deserialize(data, offset);
            this.timeout_time = BitConverter.ToDouble(data, offset);
            offset += 8;
            var trial_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.trial_name = DeserializeString(data, offset, trial_nameStringBytesLength);
            offset += trial_nameStringBytesLength;
            this.trial_number = BitConverter.ToUInt16(data, offset);
            offset += 2;
            this.num_actors = BitConverter.ToUInt32(data, offset);
            offset += 4;
            offset = this.robot_start.Deserialize(data, offset);
            offset = this.robot_goal.Deserialize(data, offset);
            this.dist_to_target = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.min_dist_to_target = BitConverter.ToDouble(data, offset);
            offset += 8;

            var robot_posesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.robot_poses = new Geometry.MPose[robot_posesArrayLength];
            for (var i = 0; i < robot_posesArrayLength; i++)
            {
                this.robot_poses[i] = new Geometry.MPose();
                offset = this.robot_poses[i].Deserialize(data, offset);
            }

            var robot_poses_tsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.robot_poses_ts = new MTime[robot_poses_tsArrayLength];
            for (var i = 0; i < robot_poses_tsArrayLength; i++)
            {
                this.robot_poses_ts[i] = new MTime();
                offset = this.robot_poses_ts[i].Deserialize(data, offset);
            }
            this.min_dist_to_ped = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.robot_on_person_intimate_dist_violations = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.person_on_robot_intimate_dist_violations = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.robot_on_person_personal_dist_violations = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.person_on_robot_personal_dist_violations = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.robot_on_person_collisions = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.person_on_robot_collisions = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.obj_collisions = BitConverter.ToUInt32(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MTrialInfo: " +
            "\nheader: " + header.ToString() +
            "\ntrial_start: " + trial_start.ToString() +
            "\ntimeout_time: " + timeout_time.ToString() +
            "\ntrial_name: " + trial_name.ToString() +
            "\ntrial_number: " + trial_number.ToString() +
            "\nnum_actors: " + num_actors.ToString() +
            "\nrobot_start: " + robot_start.ToString() +
            "\nrobot_goal: " + robot_goal.ToString() +
            "\ndist_to_target: " + dist_to_target.ToString() +
            "\nmin_dist_to_target: " + min_dist_to_target.ToString() +
            "\nrobot_poses: " + System.String.Join(", ", robot_poses.ToList()) +
            "\nrobot_poses_ts: " + System.String.Join(", ", robot_poses_ts.ToList()) +
            "\nmin_dist_to_ped: " + min_dist_to_ped.ToString() +
            "\nrobot_on_person_intimate_dist_violations: " + robot_on_person_intimate_dist_violations.ToString() +
            "\nperson_on_robot_intimate_dist_violations: " + person_on_robot_intimate_dist_violations.ToString() +
            "\nrobot_on_person_personal_dist_violations: " + robot_on_person_personal_dist_violations.ToString() +
            "\nperson_on_robot_personal_dist_violations: " + person_on_robot_personal_dist_violations.ToString() +
            "\nrobot_on_person_collisions: " + robot_on_person_collisions.ToString() +
            "\nperson_on_robot_collisions: " + person_on_robot_collisions.ToString() +
            "\nobj_collisions: " + obj_collisions.ToString();
        }
    }
}
