//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Gizmo
{
    public class MMqttStatusResponse : Message
    {
        public const string RosMessageName = "gizmo_msgs/MqttStatus";

        //  MQTT Node will assemble topic names for you based on the device, environment
        //  robot_id, and the 'endpoint' which is specified when you publish the message
        //  More info at:
        //  https://github.com/mayfieldrobotics/kuri_project_management/tree/master/mqtt
        public string device;
        public string environment;
        public string robot_id;
        //  In test environment, we let MQTT pick its own path for credentials so we
        //  don't interfere with other MQTT nodes
        public string alt_cred_path;
        public bool connected;

        public MMqttStatusResponse()
        {
            this.device = "";
            this.environment = "";
            this.robot_id = "";
            this.alt_cred_path = "";
            this.connected = false;
        }

        public MMqttStatusResponse(string device, string environment, string robot_id, string alt_cred_path, bool connected)
        {
            this.device = device;
            this.environment = environment;
            this.robot_id = robot_id;
            this.alt_cred_path = alt_cred_path;
            this.connected = connected;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(SerializeString(this.device));
            listOfSerializations.Add(SerializeString(this.environment));
            listOfSerializations.Add(SerializeString(this.robot_id));
            listOfSerializations.Add(SerializeString(this.alt_cred_path));
            listOfSerializations.Add(BitConverter.GetBytes(this.connected));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            var deviceStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.device = DeserializeString(data, offset, deviceStringBytesLength);
            offset += deviceStringBytesLength;
            var environmentStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.environment = DeserializeString(data, offset, environmentStringBytesLength);
            offset += environmentStringBytesLength;
            var robot_idStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.robot_id = DeserializeString(data, offset, robot_idStringBytesLength);
            offset += robot_idStringBytesLength;
            var alt_cred_pathStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.alt_cred_path = DeserializeString(data, offset, alt_cred_pathStringBytesLength);
            offset += alt_cred_pathStringBytesLength;
            this.connected = BitConverter.ToBoolean(data, offset);
            offset += 1;

            return offset;
        }

        public override string ToString()
        {
            return "MMqttStatusResponse: " +
            "\ndevice: " + device.ToString() +
            "\nenvironment: " + environment.ToString() +
            "\nrobot_id: " + robot_id.ToString() +
            "\nalt_cred_path: " + alt_cred_path.ToString() +
            "\nconnected: " + connected.ToString();
        }
    }
}
